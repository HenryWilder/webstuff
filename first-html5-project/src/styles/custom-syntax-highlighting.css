/* Tooltip container */
.has-tooltip {
    position: relative;
    display: inline-block;
    cursor: default;
}

/* Tooltip text */
.has-tooltip .tooltip {
    visibility: hidden;
    opacity: 0%;
    width: max-content;
    background-color: rgb(66,66,69);
    color: #fff;
    padding: 1ch 2ch;
    border-radius: 3px;
    border: 1px solid rgb(77,77,80);
    position: absolute;
    left: 0;
    top: 1rem;
    z-index: 1;
    cursor: default;
    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10 and IE 11 */
    user-select: none;
    box-shadow: -1px 2px 5px rgba(0,0,0,0.25);
    transition-delay: 0s;
}

/* Highlight the tooltip container when you mouse over it */
.has-tooltip:hover {
    background-color: rgba(51,153,255,0.25);
    border-radius: 3px;
}

/* Show the tooltip text when you mouse over the tooltip container */
.has-tooltip:hover .tooltip {
    visibility: visible;
    opacity: 100%;
    transition-delay: 0.25s;
}

.tooltip .declaration {
    text-shadow: 0 0 5px rgba(30,30,30, 0.5);
    line-height: 1.5rem;
    
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
}
.tooltip p {
    font-family: sans-serif;
    color: rgb(220,220,220);
}

/* Universal/default */
code {
    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10 and IE 11 */
    user-select: none;

    color: var(--color-plain-text);
    background-color: rgb(30,30,30);
    font-family: 'Consolas', monospace;
    display: block;
    max-width: 100%;
    width: 750px;
    min-width: fit-content;
    border-radius: 3px;
    /* border: 2px solid rgb(62,62,62); */
    margin: 0.5rem;
    cursor: default;
    tab-size: 8;
    display: flex;
    flex-flow: column nowrap;
    align-items: flex-start;
    counter-reset: snippet;
    padding: 0.5ch 2rem 0.5ch 0;
    box-shadow: inset 0 0 5px black;
}
@media only screen {
    code {
        font-size: 13px;

        /* Screen colors */
        --color-plain-text: rgb(220,220,220);

        --color-comment: rgb(87,166,74);
        --color-preprocessor: rgb(220,220,220);
        --color-preprocessor-keyword: rgb(155,155,155);
        --color-identifier: rgb(220,220,220);
        --color-keyword: rgb(86,156,214);
        --color-keyword-control: rgb(216,160,223);
        --color-operator: rgb(180,180,180);
        --color-operator-overloaded: rgb(220,220,170);
        --color-punctuation: rgb(220,220,220);
        --color-type: rgb(78,201,176);
        --color-enum: rgb(184,215,163);
        --color-literal: rgb(218,218,218);
        --color-number: rgb(181,206,168);
        --color-string: rgb(214,157,133);
        --color-excluded-code: rgb(155,155,155);

        /* C/C++ */
        --color-c-cpp-user-keyword: rgb(86,156,214);
        --color-cpp-class-template: rgb(78,201,176);
        --color-cpp-enumerator: rgb(184,215,163);
        --color-cpp-field: rgb(218,218,218);
        --color-cpp-function-template: rgb(220,220,170);
        --color-cpp-function: rgb(220,220,170);
        --color-cpp-keyword-control: rgb(216,160,223);
        --color-cpp-label: rgb(200,200,200);
        --color-cpp-local-variable: rgb(156,220,254);
        --color-cpp-macro: rgb(190,183,255);
        --color-cpp-member-function: rgb(220,220,170);
        --color-cpp-member-operator-function: rgb(180,180,180);
        --color-cpp-namespace: rgb(200,200,200);
        --color-cpp-new-delete-operator-function: rgb(86,156,214);
        --color-cpp-operator-function: rgb(180,180,180);
        --color-cpp-parameter: rgb(154,154,154);
        --color-cpp-property: rgb(200,200,200);
        --color-cpp-static-field: rgb(200,200,200);
        --color-cpp-static-member-function: rgb(220,220,170);
        --color-cpp-string-delimiter-character: rgb(232,201,187);
        --color-cpp-string-escape-character: rgb(255,214,143);
        --color-cpp-user-defined-literal-number: rgb(181,206,168);
        --color-cpp-user-defined-literal-raw: rgb(218,218,218);
        --color-cpp-user-defined-literal-string: rgb(214,157,133);
        --color-cpp-user-type: rgb(78,201,176);
        --color-cpp-user-type-generic: rgb(78,201,176);
        --color-cpp-user-type-reference: rgb(78,201,176);
        --color-cpp-user-type-value: rgb(78,201,176);
        --color-cpp-variable: rgb(200,200,200);

        /* CSS */
        --color-css-comment: rgb(87,166,74);
        --color-css-keyword: rgb(86,156,214);
        --color-css-property-name: rgb(156,220,254);
        --color-css-property-value: rgb(200,200,200);
        --color-css-selector: rgb(215,186,125);
        --color-css-string: rgb(214,157,133);

        /* GLSL */
        --color-glsl-function: rgb(255,175,95);
        --color-glsl-keyword: rgb(95,175,255);
        --color-glsl-userkeyword1: rgb(175,95,255);
        --color-glsl-userkeyword2: rgb(255,95,175);
        --color-glsl-variable: rgb(95,255,255);

        /* HTML */
        --color-html-attribute-name: rgb(156,220,254);
        --color-html-attribute-value: rgb(200,200,200);
        --color-html-client-template-separator: rgb(220,220,220);
        --color-html-client-template-tag: rgb(0,100,0);
        --color-html-client-template-value: rgb(255,0,255);
        --color-html-comment: rgb(87,166,74);
        --color-html-element-name: rgb(86,156,214);
        --color-html-entity: rgb(0,160,160);
        --color-html-operator: rgb(180,180,180);
        --color-html-razor-code-background: rgb(220,220,220);
        --color-html-razor-tag-helper-attribute: rgb(0,128,128);
        --color-html-razor-tag-helper-element: rgb(0,128,128);
        --color-html-server-side-script: rgb(0,0,0);
        --color-html-tag-delimiter: rgb(128,128,128);

        /* JSON */
        --color-json-property-name: rgb(215,185,125);

        /* Regex */
        --color-regex-alternation: rgb(5,195,186);
        --color-regex-anchor: rgb(249,121,174);
        --color-regex-character-class: rgb(46,171,254);
        --color-regex-comment: rgb(87,166,74);
        --color-regex-grouping: rgb(5,195,186);
        --color-regex-other-escape: rgb(255,214,143);
        --color-regex-quantifier: rgb(249,121,174);
        --color-regex-self-escaped-character: rgb(214,157,133);
        --color-regex-text: rgb(214,157,133);
    }
}
@media only print {
    code {
        font-size: 10pt;
        width: 100%;
        box-shadow: none;
        background-color: transparent;

        /* Print colors */
        --color-plain-text: rgb(0,0,0);

        --color-comment: rgb(0,128,0);
        --color-preprocessor: rgb(0,0,0);
        --color-preprocessor-keyword: rgb(128,128,128);
        --color-identifier: rgb(0,0,0);
        --color-keyword: rgb(0,0,255);
        --color-keyword-control: rgb(143,8,196);
        --color-operator: rgb(0,0,0);
        --color-operator-overloaded: rgb(116,83,31);
        --color-punctuation: rgb(0,0,0);
        --color-type: rgb();
        --color-enum: rgb();
        --color-literal: rgb(0,0,0);
        --color-number: rgb();
        --color-string: rgb();
        --color-excluded-code: rgb();

        /* C/C++ */
        --color-c-cpp-user-keyword: rgb(0,0,255);
        --color-cpp-class-template: rgb(43,145,175);
        --color-cpp-enumerator: rgb(47,79,79);
        --color-cpp-field: rgb(0,0,0);
        --color-cpp-function-template: rgb(116,83,31);
        --color-cpp-function: rgb(116,83,31);
        --color-cpp-keyword-control: rgb(143,8,196);
        --color-cpp-label: rgb(0,0,0);
        --color-cpp-local-variable: rgb(31,55,127);
        --color-cpp-macro: rgb(138,27,255);
        --color-cpp-member-function: rgb(116,83,31);
        --color-cpp-member-operator-function: rgb(0,128,128);
        --color-cpp-namespace: rgb(0,0,0);
        --color-cpp-new-delete-operator-function: rgb(0,0,255);
        --color-cpp-operator-function: rgb(0,128,128);
        --color-cpp-parameter: rgb(128,128,128);
        --color-cpp-property: rgb(0,0,0);
        --color-cpp-static-field: rgb(0,0,0);
        --color-cpp-static-member-function: rgb(116,83,31);
        --color-cpp-string-delimiter-character: rgb(226,31,31);
        --color-cpp-string-escape-character: rgb(183,118,251);
        --color-cpp-user-defined-literal-number: rgb(0,0,0);
        --color-cpp-user-defined-literal-raw: rgb(0,0,0);
        --color-cpp-user-defined-literal-string: rgb(163,21,21);
        --color-cpp-user-type: rgb(43,145,175);
        --color-cpp-user-type-generic: rgb(43,145,175);
        --color-cpp-user-type-reference: rgb(43,145,175);
        --color-cpp-user-type-value: rgb(43,145,175);
        --color-cpp-variable: rgb(0,0,0);

        /* CSS */
        --color-css-comment: rgb(0,100,0);
        --color-css-keyword: rgb(128,0,128);
        --color-css-property-name: rgb(255,0,0);
        --color-css-property-value: rgb(0,0,255);
        --color-css-selector: rgb(128,0,0);
        --color-css-string: rgb(0,0,255);

        /* GLSL */
        --color-glsl-function: rgb(255,175,95);
        --color-glsl-keyword: rgb(95,175,255);
        --color-glsl-userkeyword1: rgb(175,95,255);
        --color-glsl-userkeyword2: rgb(255,95,175);
        --color-glsl-variable: rgb(95,255,255);

        /* HTML */
        --color-html-attribute-name: rgb(255,0,0);
        --color-html-attribute-value: rgb(0,0,255);
        --color-html-client-template-separator: rgb(0,0,0);
        --color-html-client-template-tag: rgb(0,100,0);
        --color-html-client-template-value: rgb(128,0,128);
        --color-html-comment: rgb(0,100,0);
        --color-html-element-name: rgb(128,0,0);
        --color-html-entity: rgb(255,0,0);
        --color-html-operator: rgb(0,0,255);
        --color-html-razor-code-background: rgb(0,0,0);
        --color-html-razor-tag-helper-attribute: rgb(128,0,128);
        --color-html-razor-tag-helper-element: rgb(128,0,128);
        --color-html-server-side-script: rgb(0,0,0);
        --color-html-tag-delimiter: rgb(0,0,255);

        /* JSON */
        --color-json-property-name: rgb(46,117,182);

        /* Regex */
        --color-regex-alternation: rgb(5,195,186);
        --color-regex-anchor: rgb(255,0,193);
        --color-regex-character-class: rgb(0,115,255);
        --color-regex-comment: rgb(0,128,0);
        --color-regex-grouping: rgb(5,195,186);
        --color-regex-other-escape: rgb(158,91,113);
        --color-regex-quantifier: rgb(255,0,193);
        --color-regex-self-escaped-character: rgb(128,0,0);
        --color-regex-text: rgb(128,0,0);
    }
}
code .line {
    display: flex;
    flex-flow: row nowrap;
    width: 100%;
}
code .line::before {
    color: rgb(43,145,175);
    padding-left: 1rem;
    padding-right: 2rem;
    cursor: default;
    counter-increment: snippet 1;
    content: counter(snippet);
}
code .scope
{
    margin-left: calc(0.5ch - 1px);
    width: 3.5ch;
    border-left: 1px dotted rgb(200,200,200);
}

code .comment { color: var(--color-comment) }
code .preprocessor { color: var(--color-preprocessor) }
code .preprocessor.keyword { color: var(--color-preprocessor-keyword) }
code .identifier { color: var(--color-identifier) }
code .keyword { color: var(--color-keyword) }
code .keyword-control { color: var(--color-keyword-control) }
code .operator { color: var(--color-operator) }
code .operator-overloaded { color: var(--color-operator-overloaded) }
code .punctuation { color: var(--color-punctuation) }
code .smart-tag { border: 1px dotted rgb(215,186,125); margin: -1px }
code .type { color: var(--color-type) }
code .enum { color: var(--color-enum) }
code .literal { color: var(--color-literal) }
code .number { color: var(--color-number) }
code .string { color: var(--color-string) }
code .excluded-code { color: var(--color-excluded-code) }

/* C/C++ */
code.cpp .user-keyword, code .c .user-keyword { color: var(--color-c-cpp-user-keyword) }
code.cpp .class-template{ color: var(--color-cpp-class-template) }
code.cpp .enumerator{ color: var(--color-cpp-enumerator) }
code.cpp .field{ color: var(--color-cpp-field) }
code.cpp .function-template{ color: var(--color-cpp-function-template) }
code.cpp .function{ color: var(--color-cpp-function) }
code.cpp .keyword-control{ color: var(--color-cpp-keyword-control) }
code.cpp .label{ color: var(--color-cpp-label) }
code.cpp .local-variable{ color: var(--color-cpp-local-variable) }
code.cpp .macro{ color: var(--color-cpp-macro) }
code.cpp .member-function{ color: var(--color-cpp-member-function) }
code.cpp .member-operator-function{ color: var(--color-cpp-member-operator-function) }
code.cpp .namespace{ color: var(--color-cpp-namespace) }
code.cpp .new-delete-operator-function{ color: var(--color-cpp-new-delete-operator-function) }
code.cpp .operator-function{ color: var(--color-cpp-operator-function) }
code.cpp .parameter{ color: var(--color-cpp-parameter) }
code.cpp .property{ color: var(--color-cpp-property) }
code.cpp .static-field{ color: var(--color-cpp-static-field) }
code.cpp .static-member-function{ color: var(--color-cpp-static-member-function) }
code.cpp .string .delimiter-character { color: var(--color-cpp-string-delimiter-character) }
code.cpp .string::before {
    content: attr(open-seq);
    color: var(--color-cpp-string-delimiter-character)
}
code.cpp .string::after {
    content: attr(close-seq);
    color: var(--color-cpp-string-delimiter-character)
}
code.cpp .string .escape-character { color: var(--color-cpp-string-escape-character) }
code.cpp .user-defined-literal.number { color: var(--color-cpp-user-defined-literal-number) }
code.cpp .user-defined-literal.raw { color: var(--color-cpp-user-defined-literal-raw) }
code.cpp .user-defined-literal.string { color: var(--color-cpp-user-defined-literal-string) }
code.cpp .user-type{ color: var(--color-cpp-user-type) }
code.cpp .user-type.generic { color: var(--color-cpp-user-type-generic) }
code.cpp .user-type.reference { color: var(--color-cpp-user-type-reference) }
code.cpp .user-type.value { color: var(--color-cpp-user-type-value) }
code.cpp .variable{ color: var(--color-cpp-variable) }

/* CSS */
code.css .comment{ color: var(--color-css-comment) }
code.css .keyword{ color: var(--color-css-keyword) }
code.css .property-name{ color: var(--color-css-property-name) }
code.css .property-value{ color: var(--color-css-property-value) }
code.css .selector{ color: var(--color-css-selector) }
code.css .string{ color: var(--color-css-string) }

/* GLSL */
code.glsl .function{ color: var(--color-glsl-function) }
code.glsl .keyword{ color: var(--color-glsl-keyword) }
code.glsl .userkeyword1{ color: var(--color-glsl-userkeyword1) }
code.glsl .userkeyword2{ color: var(--color-glsl-userkeyword2) }
code.glsl .variable{ color: var(--color-glsl-variable) }

/* HTML */
code.html .attribute-name{ color: var(--color-html-attribute-name) }
code.html .attribute-value{ color: var(--color-html-attribute-value) }
code.html .client-template-separator { color: var(--color-html-client-template-separator); font-weight: bold }
code.html .client-template-tag { color: var(--color-html-client-template-tag); font-weight: bold }
code.html .client-template-value{ color: var(--color-html-client-template-value) }
code.html .comment{ color: var(--color-html-comment) }
code.html .element-name{ color: var(--color-html-element-name) }
code.html .entity{ color: var(--color-html-entity) }
code.html .operator{ color: var(--color-html-operator) }
code.html .razor-code-background { color: var(--color-html-razor-code-background); background-color: rgb(80,80,80) }
code.html .razor-tag-helper-attribute { color: var(--color-html-razor-tag-helper-attribute); font-weight: bold }
code.html .razor-tag-helper-element { color: var(--color-html-razor-tag-helper-element); font-weight: bold }
code.html .server-side-script { color: var(--color-html-server-side-script); background-color: rgb(255,255,179) }
code.html .tag-delimiter{ color: var(--color-html-tag-delimiter) }

/* JSON */
code.json .property-name{ color: var(--color-json-property-name) }

/* Regex */
code.regex .alternation{ color: var(--color-regex-alternation) }
code.regex .anchor{ color: var(--color-regex-anchor) }
code.regex .character-class{ color: var(--color-regex-character-class) }
code.regex .comment{ color: var(--color-regex-comment) }
code.regex .grouping{ color: var(--color-regex-grouping) }
code.regex .other-escape{ color: var(--color-regex-other-escape) }
code.regex .quantifier{ color: var(--color-regex-quantifier) }
code.regex .self-escaped-character { color: var(--color-regex-self-escaped-character); font-weight: bold }
code.regex .text{ color: var(--color-regex-text) }
